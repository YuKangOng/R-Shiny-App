for (i in 1:length(zone_radii)) {
color_index <- round(percentages[i] * 100)
color_index <- max(1, min(color_index, 100))
zone_color <- color_scale[color_index]
# Half-circle part
half_circle <- ellipse_points(center = c(0, hoop_center_y), h_radius = zone_radii[i], v_radius = zone_radii[i]) %>%
filter(y >= hoop_center_y, y <= height) %>%
mutate(desc = zone_descriptions[i], fill = zone_color)
# Rectangular part
rectangle <- tibble(
x = c(-zone_radii[i], zone_radii[i], zone_radii[i], -zone_radii[i]),
y = c(0, 0, hoop_center_y, hoop_center_y),
desc = zone_descriptions[i],
fill = zone_color
)
zones <- bind_rows(zones, half_circle, rectangle)
}
color_index_3pt <- round(percentages[-1] * 100)
color_index_3pt <- max(1, min(color_index, 100))
zone_color_3pt <- color_scale[color_index]
# Create a background rectangle for the entire court
court_background <- tibble(
x = c(-width/2, width/2, width/2, -width/2),
y = c(0, 0, height, height),
desc = "court_background",
fill = zone_color_3pt,
text = "3pt+"  # Add this line for hover text
)
# Create labels for the shooting percentages
labels <- tibble(
x = c(0, 0, 0, 0, 0),
y = c(hoop_center_y + 1.5, hoop_center_y + 6.5, hoop_center_y + 13, hoop_center_y + 19, hoop_center_y + 25),
label = sprintf("%.1f%%", percentages * 100)
)
court_plot <-
ggplot() +
geom_polygon(
data = court_background,
aes(x = x, y = y, fill = fill, text = text),
alpha = 1
) +
geom_polygon(
data = zones,
aes(x = x, y = y, group = desc, fill = fill, text = desc),
alpha = 0.5
) +
geom_path(
data = court_points,
aes(x = x, y = y, group = desc),
color = court_theme$lines
) +
geom_text(
data = labels,
aes(x = x, y = y, label = label),
color = court_theme$text,
size = 4,
fontface = "bold"
) +
coord_fixed(ylim = c(0, 35), xlim = c(-25, 25)) +
scale_fill_identity() +
theme_minimal(base_size = 22) +
theme(
text = element_text(color = court_theme$text),
plot.background = element_rect(fill = court_theme$court, color = court_theme$court),
panel.background = element_rect(fill = court_theme$court, color = court_theme$court),
panel.grid = element_blank(),
panel.border = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "none"
) +
guides(fill = "none")
ggplotly(court_plot, tooltip = c("text")) %>%
style(hoverinfo = "text", traces = seq_len(nrow(zones) + 2))
}
# Usage:
plot_court(court_theme = court_themes$light, shooting_data = shooting2)
runApp('DkIT CA/Data Visualisation and Insights/CA2/R Shiny')
shiny::runApp('DkIT CA/Data Visualisation and Insights/CA2/R Shiny')
setwd("~/DkIT CA/Data Visualisation and Insights/CA2/R Shiny")
players <- read.csv("players.csv")
library(dplyr)
players <- read.csv("players.csv")
players <- players %>%
group_by(Season, Player, Age, All_Star) %>%
summarise(
Team = paste(Team, collapse = ", "),
Position = ifelse(n_distinct(Position) > 1, paste(unique(Position), collapse = ", "), unique(Position)),
Games_Started = sum(Games_Started),
Minutes_Played = round(sum(Minutes_Played * Games) / sum(Games), 1),
Field_Goals = round(sum(Field_Goals * Games) / sum(Games), 1),
Field_Goal_Attempts = round(sum(Field_Goal_Attempts * Games) / sum(Games), 1),
Field_Goal_Percentage = round(sum(Field_Goal_Percentage * Games) / sum(Games), 3),
Three_Point_Field_Goals = round(sum(Three_Point_Field_Goals * Games) / sum(Games), 1),
Three_Point_Field_Goal_Attempts = round(sum(Three_Point_Field_Goal_Attempts * Games) / sum(Games), 1),
Three_Point_Field_Goal_Percentage = round(sum(Three_Point_Field_Goal_Percentage * Games) / sum(Games), 3),
Two_Point_Field_Goals = round(sum(Two_Point_Field_Goals * Games) / sum(Games), 1),
Two_Point_Field_Goal_Attempts = round(sum(Two_Point_Field_Goal_Attempts * Games) / sum(Games), 1),
Two_Point_Field_Goal_Percentage = round(sum(Two_Point_Field_Goal_Percentage * Games) / sum(Games), 3),
Effective_Field_Goal_Percentage = round(sum(Effective_Field_Goal_Percentage * Games) / sum(Games), 3),
Free_Throws = round(sum(Free_Throws * Games) / sum(Games), 1),
Free_Throw_Attempts = round(sum(Free_Throw_Attempts * Games) / sum(Games), 1),
Free_Throw_Percentage = round(sum(Free_Throw_Percentage * Games) / sum(Games), 3),
Offensive_Rebounds = round(sum(Offensive_Rebounds * Games) / sum(Games), 1),
Defensive_Rebounds = round(sum(Defensive_Rebounds * Games) / sum(Games), 1),
Total_Rebounds = round(sum(Total_Rebounds * Games) / sum(Games), 1),
Assists = round(sum(Assists * Games) / sum(Games), 1),
Steals = round(sum(Steals * Games) / sum(Games), 1),
Blocks = round(sum(Blocks * Games) / sum(Games), 1),
Turnovers = round(sum(Turnovers * Games) / sum(Games), 1),
Personal_Fouls = round(sum(Personal_Fouls * Games) / sum(Games), 1),
Points = round(sum(Points * Games) / sum(Games), 1),
Games = sum(Games),
.groups = "drop"
)
players <- subset(players, select = -c(Season, Player, Age, Team, Position, Games, Games_Started, Minutes_Played, Field_Goals, Field_Goal_Attempts, Field_Goal_Percentage, Three_Point_Field_Goal_Attempt, Two_Point_Field_Goal_Attempt, Free_Throw_Attempt, Effective_Field_Goal_Percentage, Total_Rebounds, Points))
players <- subset(players, select = -c(Season, Player, Age, Team, Position, Games, Games_Started, Minutes_Played, Field_Goals, Field_Goal_Attempts, Field_Goal_Percentage, Three_Point_Field_Goal_Attempts, Two_Point_Field_Goal_Attempts, Free_Throw_Attempts, Effective_Field_Goal_Percentage, Total_Rebounds, Points))
library(dplyr)
players <- read.csv("players.csv")
players <- players %>%
group_by(Season, Player, Age, All_Star) %>%
summarise(
Team = paste(Team, collapse = ", "),
Position = ifelse(n_distinct(Position) > 1, paste(unique(Position), collapse = ", "), unique(Position)),
Games_Started = sum(Games_Started),
Minutes_Played = round(sum(Minutes_Played * Games) / sum(Games), 1),
Field_Goals = round(sum(Field_Goals * Games) / sum(Games), 1),
Field_Goal_Attempts = round(sum(Field_Goal_Attempts * Games) / sum(Games), 1),
Field_Goal_Percentage = round(sum(Field_Goal_Percentage * Games) / sum(Games), 3),
Three_Point_Field_Goals = round(sum(Three_Point_Field_Goals * Games) / sum(Games), 1),
Three_Point_Field_Goal_Attempts = round(sum(Three_Point_Field_Goal_Attempts * Games) / sum(Games), 1),
Three_Point_Field_Goal_Percentage = round(sum(Three_Point_Field_Goal_Percentage * Games) / sum(Games), 3),
Two_Point_Field_Goals = round(sum(Two_Point_Field_Goals * Games) / sum(Games), 1),
Two_Point_Field_Goal_Attempts = round(sum(Two_Point_Field_Goal_Attempts * Games) / sum(Games), 1),
Two_Point_Field_Goal_Percentage = round(sum(Two_Point_Field_Goal_Percentage * Games) / sum(Games), 3),
Effective_Field_Goal_Percentage = round(sum(Effective_Field_Goal_Percentage * Games) / sum(Games), 3),
Free_Throws = round(sum(Free_Throws * Games) / sum(Games), 1),
Free_Throw_Attempts = round(sum(Free_Throw_Attempts * Games) / sum(Games), 1),
Free_Throw_Percentage = round(sum(Free_Throw_Percentage * Games) / sum(Games), 3),
Offensive_Rebounds = round(sum(Offensive_Rebounds * Games) / sum(Games), 1),
Defensive_Rebounds = round(sum(Defensive_Rebounds * Games) / sum(Games), 1),
Total_Rebounds = round(sum(Total_Rebounds * Games) / sum(Games), 1),
Assists = round(sum(Assists * Games) / sum(Games), 1),
Steals = round(sum(Steals * Games) / sum(Games), 1),
Blocks = round(sum(Blocks * Games) / sum(Games), 1),
Turnovers = round(sum(Turnovers * Games) / sum(Games), 1),
Personal_Fouls = round(sum(Personal_Fouls * Games) / sum(Games), 1),
Points = round(sum(Points * Games) / sum(Games), 1),
Games = sum(Games),
.groups = "drop"
)
players <- subset(players, select = -c(Season, Player, Age, Team, Position, Games, Games_Started, Minutes_Played, Field_Goals, Field_Goal_Attempts, Field_Goal_Percentage, Three_Point_Field_Goal_Attempts, Two_Point_Field_Goal_Attempts, Free_Throw_Attempts, Effective_Field_Goal_Percentage, Total_Rebounds, Points))
train <- players[1:4247,]
test <- players[4248:5309,]
model <- glm(All_Star ~ Three_Point_Field_Goals +
Three_Point_Field_Goal_Percentage + Two_Point_Field_Goals +
Two_Point_Field_Goal_Percentage + Free_Throws + Free_Throw_Percentage +
Offensive_Rebounds + Defensive_Rebounds + Assists + Steals + Blocks +
Turnovers + Personal_Fouls,
family=binomial(link='logit'),data=train)
summary(model)
fitted.results <- predict(model,newdata=subset(test,select=c(2:15)),type='response')
library(dplyr)
players <- read.csv("players.csv")
players <- players %>%
group_by(Season, Player, Age, All_Star) %>%
summarise(
Team = paste(Team, collapse = ", "),
Position = ifelse(n_distinct(Position) > 1, paste(unique(Position), collapse = ", "), unique(Position)),
Games_Started = sum(Games_Started),
Minutes_Played = round(sum(Minutes_Played * Games) / sum(Games), 1),
Field_Goals = round(sum(Field_Goals * Games) / sum(Games), 1),
Field_Goal_Attempts = round(sum(Field_Goal_Attempts * Games) / sum(Games), 1),
Field_Goal_Percentage = round(sum(Field_Goal_Percentage * Games) / sum(Games), 3),
Three_Point_Field_Goals = round(sum(Three_Point_Field_Goals * Games) / sum(Games), 1),
Three_Point_Field_Goal_Attempts = round(sum(Three_Point_Field_Goal_Attempts * Games) / sum(Games), 1),
Three_Point_Field_Goal_Percentage = round(sum(Three_Point_Field_Goal_Percentage * Games) / sum(Games), 3),
Two_Point_Field_Goals = round(sum(Two_Point_Field_Goals * Games) / sum(Games), 1),
Two_Point_Field_Goal_Attempts = round(sum(Two_Point_Field_Goal_Attempts * Games) / sum(Games), 1),
Two_Point_Field_Goal_Percentage = round(sum(Two_Point_Field_Goal_Percentage * Games) / sum(Games), 3),
Effective_Field_Goal_Percentage = round(sum(Effective_Field_Goal_Percentage * Games) / sum(Games), 3),
Free_Throws = round(sum(Free_Throws * Games) / sum(Games), 1),
Free_Throw_Attempts = round(sum(Free_Throw_Attempts * Games) / sum(Games), 1),
Free_Throw_Percentage = round(sum(Free_Throw_Percentage * Games) / sum(Games), 3),
Offensive_Rebounds = round(sum(Offensive_Rebounds * Games) / sum(Games), 1),
Defensive_Rebounds = round(sum(Defensive_Rebounds * Games) / sum(Games), 1),
Total_Rebounds = round(sum(Total_Rebounds * Games) / sum(Games), 1),
Assists = round(sum(Assists * Games) / sum(Games), 1),
Steals = round(sum(Steals * Games) / sum(Games), 1),
Blocks = round(sum(Blocks * Games) / sum(Games), 1),
Turnovers = round(sum(Turnovers * Games) / sum(Games), 1),
Personal_Fouls = round(sum(Personal_Fouls * Games) / sum(Games), 1),
Points = round(sum(Points * Games) / sum(Games), 1),
Games = sum(Games),
.groups = "drop"
)
players <- subset(players, select = -c(Season, Player, Age, Team, Position, Games, Games_Started, Minutes_Played, Field_Goals, Field_Goal_Attempts, Field_Goal_Percentage, Three_Point_Field_Goal_Attempts, Two_Point_Field_Goal_Attempts, Free_Throw_Attempts, Effective_Field_Goal_Percentage, Total_Rebounds, Points))
train <- players[1:4247,]
test <- players[4248:5309,]
model <- glm(All_Star ~ Three_Point_Field_Goals +
Three_Point_Field_Goal_Percentage + Two_Point_Field_Goals +
Two_Point_Field_Goal_Percentage + Free_Throws + Free_Throw_Percentage +
Offensive_Rebounds + Defensive_Rebounds + Assists + Steals + Blocks +
Turnovers + Personal_Fouls,
family=binomial(link='logit'),data=train)
summary(model)
fitted.results <- predict(model,newdata=subset(test,select=c(2:14)),type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != test$All_Star)
print(paste('Accuracy',1-misClasificError))
anova(model, test="Chisq")
library(caret)
confusionMatrix <- confusionMatrix(factor(fitted.results), factor(test$All_Star))
print(confusionMatrix)
precision <- confusionMatrix$byClass["Precision"]
recall <- confusionMatrix$byClass["Recall"]
f1_score <- 2 * ((precision * recall) / (precision + recall))
print(paste("F1 Score:", f1_score))
fitted.probabilities <- predict(model, newdata=subset(test, select=c(2:15)), type='response')
fitted.probabilities <- predict(model, newdata=subset(test, select=c(2:14)), type='response')
actual <- test$All_Star
predicted <- fitted.probabilities
log_loss <- -mean(actual * log(predicted) + (1 - actual) * log(1 - predicted))
print(paste("Log-Loss:", log_loss))
new_data <- data.frame(
Three_Point_Field_Goals = 0.1,
Three_Point_Field_Goal_Percentage = 0.132,
Two_Point_Field_Goals = 13.0,
Two_Point_Field_Goal_Percentage = 0.546,
Free_Throws = 8.8,
Free_Throw_Percentage = 0.841,
Offensive_Rebounds = 1.7,
Defensive_Rebounds = 3.8,
Assists = 5.9,
Steals = 3.2,
Blocks = 1.6,
Turnovers = 3.1,
Personal_Fouls = 3.3
)
ifelse(predict(model,newdata=new_data,type='response') > 0.5, "Yes", "No")
train2 <- players3[1:4247,]
library(dplyr)
players <- read.csv("players.csv")
players <- players %>%
group_by(Season, Player, Age, All_Star) %>%
summarise(
Team = paste(Team, collapse = ", "),
Position = ifelse(n_distinct(Position) > 1, paste(unique(Position), collapse = ", "), unique(Position)),
Games_Started = sum(Games_Started),
Minutes_Played = round(sum(Minutes_Played * Games) / sum(Games), 1),
Field_Goals = round(sum(Field_Goals * Games) / sum(Games), 1),
Field_Goal_Attempts = round(sum(Field_Goal_Attempts * Games) / sum(Games), 1),
Field_Goal_Percentage = round(sum(Field_Goal_Percentage * Games) / sum(Games), 3),
Three_Point_Field_Goals = round(sum(Three_Point_Field_Goals * Games) / sum(Games), 1),
Three_Point_Field_Goal_Attempts = round(sum(Three_Point_Field_Goal_Attempts * Games) / sum(Games), 1),
Three_Point_Field_Goal_Percentage = round(sum(Three_Point_Field_Goal_Percentage * Games) / sum(Games), 3),
Two_Point_Field_Goals = round(sum(Two_Point_Field_Goals * Games) / sum(Games), 1),
Two_Point_Field_Goal_Attempts = round(sum(Two_Point_Field_Goal_Attempts * Games) / sum(Games), 1),
Two_Point_Field_Goal_Percentage = round(sum(Two_Point_Field_Goal_Percentage * Games) / sum(Games), 3),
Effective_Field_Goal_Percentage = round(sum(Effective_Field_Goal_Percentage * Games) / sum(Games), 3),
Free_Throws = round(sum(Free_Throws * Games) / sum(Games), 1),
Free_Throw_Attempts = round(sum(Free_Throw_Attempts * Games) / sum(Games), 1),
Free_Throw_Percentage = round(sum(Free_Throw_Percentage * Games) / sum(Games), 3),
Offensive_Rebounds = round(sum(Offensive_Rebounds * Games) / sum(Games), 1),
Defensive_Rebounds = round(sum(Defensive_Rebounds * Games) / sum(Games), 1),
Total_Rebounds = round(sum(Total_Rebounds * Games) / sum(Games), 1),
Assists = round(sum(Assists * Games) / sum(Games), 1),
Steals = round(sum(Steals * Games) / sum(Games), 1),
Blocks = round(sum(Blocks * Games) / sum(Games), 1),
Turnovers = round(sum(Turnovers * Games) / sum(Games), 1),
Personal_Fouls = round(sum(Personal_Fouls * Games) / sum(Games), 1),
Points = round(sum(Points * Games) / sum(Games), 1),
Games = sum(Games),
.groups = "drop"
)
players2 <- subset(players, select = -c(Season, Player, Age, Team, Position, Games, Games_Started, Minutes_Played, Field_Goals, Field_Goal_Attempts, Field_Goal_Percentage, Three_Point_Field_Goal_Attempts, Two_Point_Field_Goal_Attempts, Free_Throw_Attempts, Effective_Field_Goal_Percentage, Total_Rebounds, Points))
train <- players2[1:4247,]
test <- players2[4248:5309,]
model <- glm(All_Star ~ Three_Point_Field_Goals +
Three_Point_Field_Goal_Percentage + Two_Point_Field_Goals +
Two_Point_Field_Goal_Percentage + Free_Throws + Free_Throw_Percentage +
Offensive_Rebounds + Defensive_Rebounds + Assists + Steals + Blocks +
Turnovers + Personal_Fouls,
family=binomial(link='logit'),data=train)
summary(model)
players3 <- subset(players, select = -c(Season, Player, Age, Team, Position, Games, Games_Started, Minutes_Played, Field_Goals, Field_Goal_Attempts, Field_Goal_Percentage, Three_Point_Field_Goal_Attempts, Three_Point_Field_Goal_Percentage, Two_Point_Field_Goal_Attempts, Two_Point_Field_Goal_Percentage, Free_Throw_Attempts, Free_Throw_Percentage, Effective_Field_Goal_Percentage, Total_Rebounds, Offensive_Rebounds, Turnovers, Points))
train2 <- players3[1:4247,]
test2 <- players3[4248:5309,]
model2 <- glm(All_Star ~ Three_Point_Field_Goals +
Two_Point_Field_Goals + Free_Throws + Defensive_Rebounds + Assists + Steals +
Blocks + Personal_Fouls,
family=binomial(link='logit'),data=train)
summary(model2)
fitted.results <- predict(model2,newdata=subset(test,select=c(2:9)),type='response')
fitted.results <- predict(model2,newdata=subset(test,select=c(2:9)),type='response')
library(dplyr)
players <- read.csv("players.csv")
players <- players %>%
group_by(Season, Player, Age, All_Star) %>%
summarise(
Team = paste(Team, collapse = ", "),
Position = ifelse(n_distinct(Position) > 1, paste(unique(Position), collapse = ", "), unique(Position)),
Games_Started = sum(Games_Started),
Minutes_Played = round(sum(Minutes_Played * Games) / sum(Games), 1),
Field_Goals = round(sum(Field_Goals * Games) / sum(Games), 1),
Field_Goal_Attempts = round(sum(Field_Goal_Attempts * Games) / sum(Games), 1),
Field_Goal_Percentage = round(sum(Field_Goal_Percentage * Games) / sum(Games), 3),
Three_Point_Field_Goals = round(sum(Three_Point_Field_Goals * Games) / sum(Games), 1),
Three_Point_Field_Goal_Attempts = round(sum(Three_Point_Field_Goal_Attempts * Games) / sum(Games), 1),
Three_Point_Field_Goal_Percentage = round(sum(Three_Point_Field_Goal_Percentage * Games) / sum(Games), 3),
Two_Point_Field_Goals = round(sum(Two_Point_Field_Goals * Games) / sum(Games), 1),
Two_Point_Field_Goal_Attempts = round(sum(Two_Point_Field_Goal_Attempts * Games) / sum(Games), 1),
Two_Point_Field_Goal_Percentage = round(sum(Two_Point_Field_Goal_Percentage * Games) / sum(Games), 3),
Effective_Field_Goal_Percentage = round(sum(Effective_Field_Goal_Percentage * Games) / sum(Games), 3),
Free_Throws = round(sum(Free_Throws * Games) / sum(Games), 1),
Free_Throw_Attempts = round(sum(Free_Throw_Attempts * Games) / sum(Games), 1),
Free_Throw_Percentage = round(sum(Free_Throw_Percentage * Games) / sum(Games), 3),
Offensive_Rebounds = round(sum(Offensive_Rebounds * Games) / sum(Games), 1),
Defensive_Rebounds = round(sum(Defensive_Rebounds * Games) / sum(Games), 1),
Total_Rebounds = round(sum(Total_Rebounds * Games) / sum(Games), 1),
Assists = round(sum(Assists * Games) / sum(Games), 1),
Steals = round(sum(Steals * Games) / sum(Games), 1),
Blocks = round(sum(Blocks * Games) / sum(Games), 1),
Turnovers = round(sum(Turnovers * Games) / sum(Games), 1),
Personal_Fouls = round(sum(Personal_Fouls * Games) / sum(Games), 1),
Points = round(sum(Points * Games) / sum(Games), 1),
Games = sum(Games),
.groups = "drop"
)
players2 <- subset(players, select = -c(Season, Player, Age, Team, Position, Games, Games_Started, Minutes_Played, Field_Goals, Field_Goal_Attempts, Field_Goal_Percentage, Three_Point_Field_Goal_Attempts, Two_Point_Field_Goal_Attempts, Free_Throw_Attempts, Effective_Field_Goal_Percentage, Total_Rebounds, Points))
train <- players2[1:4247,]
test <- players2[4248:5309,]
model <- glm(All_Star ~ Three_Point_Field_Goals +
Three_Point_Field_Goal_Percentage + Two_Point_Field_Goals +
Two_Point_Field_Goal_Percentage + Free_Throws + Free_Throw_Percentage +
Offensive_Rebounds + Defensive_Rebounds + Assists + Steals + Blocks +
Turnovers + Personal_Fouls,
family=binomial(link='logit'),data=train)
summary(model)
players3 <- subset(players, select = -c(Season, Player, Age, Team, Position, Games, Games_Started, Minutes_Played, Field_Goals, Field_Goal_Attempts, Field_Goal_Percentage, Three_Point_Field_Goal_Attempts, Three_Point_Field_Goal_Percentage, Two_Point_Field_Goal_Attempts, Two_Point_Field_Goal_Percentage, Free_Throw_Attempts, Free_Throw_Percentage, Effective_Field_Goal_Percentage, Total_Rebounds, Offensive_Rebounds, Turnovers, Points))
train2 <- players3[1:4247,]
test2 <- players3[4248:5309,]
model2 <- glm(All_Star ~ Three_Point_Field_Goals +
Two_Point_Field_Goals + Free_Throws + Defensive_Rebounds + Assists + Steals +
Blocks + Personal_Fouls,
family=binomial(link='logit'),data=train)
summary(model2)
fitted.results <- predict(model2,newdata=subset(test,select=c(2:9)),type='response')
fitted.results <- predict(model2,newdata=subset(test,select=c(2:10)),type='response')
fitted.results <- predict(model2,newdata=subset(test2,select=c(2:10)),type='response')
library(dplyr)
players <- read.csv("players.csv")
players <- players %>%
group_by(Season, Player, Age, All_Star) %>%
summarise(
Team = paste(Team, collapse = ", "),
Position = ifelse(n_distinct(Position) > 1, paste(unique(Position), collapse = ", "), unique(Position)),
Games_Started = sum(Games_Started),
Minutes_Played = round(sum(Minutes_Played * Games) / sum(Games), 1),
Field_Goals = round(sum(Field_Goals * Games) / sum(Games), 1),
Field_Goal_Attempts = round(sum(Field_Goal_Attempts * Games) / sum(Games), 1),
Field_Goal_Percentage = round(sum(Field_Goal_Percentage * Games) / sum(Games), 3),
Three_Point_Field_Goals = round(sum(Three_Point_Field_Goals * Games) / sum(Games), 1),
Three_Point_Field_Goal_Attempts = round(sum(Three_Point_Field_Goal_Attempts * Games) / sum(Games), 1),
Three_Point_Field_Goal_Percentage = round(sum(Three_Point_Field_Goal_Percentage * Games) / sum(Games), 3),
Two_Point_Field_Goals = round(sum(Two_Point_Field_Goals * Games) / sum(Games), 1),
Two_Point_Field_Goal_Attempts = round(sum(Two_Point_Field_Goal_Attempts * Games) / sum(Games), 1),
Two_Point_Field_Goal_Percentage = round(sum(Two_Point_Field_Goal_Percentage * Games) / sum(Games), 3),
Effective_Field_Goal_Percentage = round(sum(Effective_Field_Goal_Percentage * Games) / sum(Games), 3),
Free_Throws = round(sum(Free_Throws * Games) / sum(Games), 1),
Free_Throw_Attempts = round(sum(Free_Throw_Attempts * Games) / sum(Games), 1),
Free_Throw_Percentage = round(sum(Free_Throw_Percentage * Games) / sum(Games), 3),
Offensive_Rebounds = round(sum(Offensive_Rebounds * Games) / sum(Games), 1),
Defensive_Rebounds = round(sum(Defensive_Rebounds * Games) / sum(Games), 1),
Total_Rebounds = round(sum(Total_Rebounds * Games) / sum(Games), 1),
Assists = round(sum(Assists * Games) / sum(Games), 1),
Steals = round(sum(Steals * Games) / sum(Games), 1),
Blocks = round(sum(Blocks * Games) / sum(Games), 1),
Turnovers = round(sum(Turnovers * Games) / sum(Games), 1),
Personal_Fouls = round(sum(Personal_Fouls * Games) / sum(Games), 1),
Points = round(sum(Points * Games) / sum(Games), 1),
Games = sum(Games),
.groups = "drop"
)
players2 <- subset(players, select = -c(Season, Player, Age, Team, Position, Games, Games_Started, Minutes_Played, Field_Goals, Field_Goal_Attempts, Field_Goal_Percentage, Three_Point_Field_Goal_Attempts, Two_Point_Field_Goal_Attempts, Free_Throw_Attempts, Effective_Field_Goal_Percentage, Total_Rebounds, Points))
train <- players2[1:4247,]
test <- players2[4248:5309,]
model <- glm(All_Star ~ Three_Point_Field_Goals +
Three_Point_Field_Goal_Percentage + Two_Point_Field_Goals +
Two_Point_Field_Goal_Percentage + Free_Throws + Free_Throw_Percentage +
Offensive_Rebounds + Defensive_Rebounds + Assists + Steals + Blocks +
Turnovers + Personal_Fouls,
family=binomial(link='logit'),data=train)
summary(model)
players3 <- subset(players, select = -c(Season, Player, Age, Team, Position, Games, Games_Started, Minutes_Played, Field_Goals, Field_Goal_Attempts, Field_Goal_Percentage, Three_Point_Field_Goal_Attempts, Three_Point_Field_Goal_Percentage, Two_Point_Field_Goal_Attempts, Two_Point_Field_Goal_Percentage, Free_Throw_Attempts, Free_Throw_Percentage, Effective_Field_Goal_Percentage, Total_Rebounds, Offensive_Rebounds, Turnovers, Points))
train2 <- players3[1:4247,]
test2 <- players3[4248:5309,]
model2 <- glm(All_Star ~ Three_Point_Field_Goals +
Two_Point_Field_Goals + Free_Throws + Defensive_Rebounds + Assists + Steals +
Blocks + Personal_Fouls,
family=binomial(link='logit'),data=train)
summary(model2)
fitted.results <- predict(model2,newdata=subset(test2,select=c(2:10)),type='response')
fitted.results <- predict(model2,newdata=subset(test2,select=c(2:9)),type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != test2$All_Star)
print(paste('Accuracy',1-misClasificError))
library(caret)
confusionMatrix <- confusionMatrix(factor(fitted.results), factor(test2$All_Star))
print(confusionMatrix)
precision <- confusionMatrix$byClass["Precision"]
recall <- confusionMatrix$byClass["Recall"]
f1_score <- 2 * ((precision * recall) / (precision + recall))
print(paste("F1 Score:", f1_score))
fitted.probabilities <- predict(model, newdata=subset(test2, select=c(2:9)), type='response')
fitted.probabilities <- predict(model2, newdata=subset(test2, select=c(2:9)), type='response')
actual <- test2$All_Star
predicted <- fitted.probabilities
log_loss <- -mean(actual * log(predicted) + (1 - actual) * log(1 - predicted))
print(paste("Log-Loss:", log_loss))
new_data <- data.frame(
Three_Point_Field_Goals = 0.1,
Two_Point_Field_Goals = 13.0,
Free_Throws = 8.8,
Free_Throw_Percentage = 0.841,
Defensive_Rebounds = 3.8,
Assists = 5.9,
Steals = 3.2,
Blocks = 1.6,
Personal_Fouls = 3.3
)
ifelse(predict(model,newdata=new_data,type='response') > 0.5, "Yes", "No")
new_data <- data.frame(
Three_Point_Field_Goals = 0.1,
Two_Point_Field_Goals = 13.0,
Free_Throws = 8.8,
Free_Throw_Percentage = 0.841,
Defensive_Rebounds = 3.8,
Assists = 5.9,
Steals = 3.2,
Blocks = 1.6,
Personal_Fouls = 3.3
)
ifelse(predict(model2,newdata=new_data,type='response') > 0.5, "Yes", "No")
new_data <- data.frame(
Three_Point_Field_Goals = 0.1,
Three_Point_Field_Goal_Percentage = 0.132,
Two_Point_Field_Goals = 13.0,
Two_Point_Field_Goal_Percentage = 0.546,
Free_Throws = 8.8,
Free_Throw_Percentage = 0.841,
Offensive_Rebounds = 1.7,
Defensive_Rebounds = 3.8,
Assists = 5.9,
Steals = 3.2,
Blocks = 1.6,
Turnovers = 3.1,
Personal_Fouls = 3.3,
Points = 35.0
)
ifelse(predict(model,newdata=new_data,type='response') > 0.5, "Yes", "No")
new_data <- data.frame(
Three_Point_Field_Goals = 0.1,
Two_Point_Field_Goals = 13.0,
Free_Throws = 8.8,
Defensive_Rebounds = 3.8,
Assists = 5.9,
Steals = 3.2,
Blocks = 1.6,
Personal_Fouls = 3.3
)
ifelse(predict(model,newdata=new_data,type='response') > 0.5, "Yes", "No")
new_data <- data.frame(
Three_Point_Field_Goals = 0.1,
Two_Point_Field_Goals = 13.0,
Free_Throws = 8.8,
Defensive_Rebounds = 3.8,
Assists = 5.9,
Steals = 3.2,
Blocks = 1.6,
Personal_Fouls = 3.3
)
ifelse(predict(model2,newdata=new_data,type='response') > 0.5, "Yes", "No")
new_data <- data.frame(
Three_Point_Field_Goals = 1.8
Two_Point_Field_Goals = 6.0,
new_data2 <- data.frame(
Three_Point_Field_Goals = 1.8,
Two_Point_Field_Goals = 6.0,
Free_Throws = 4.1,
Defensive_Rebounds = 8.4,
Assists = 3.9,
Steals = 1.2,
Blocks = 3.6,
Personal_Fouls = 2.2
)
ifelse(predict(model2,newdata=new_data2,type='response') > 0.5, "Yes", "No")
new_data3 <- data.frame(
Three_Point_Field_Goals = 2.0,
Two_Point_Field_Goals = 4.0,
Free_Throws = 3.5,
Defensive_Rebounds = 3.1,
Assists = 2.8,
Steals = 0.9,
Blocks = 0.2,
Personal_Fouls = 1.7
)
ifelse(predict(model2,newdata=new_data3,type='response') > 0.5, "Yes", "No")
library(dplyr)
players <- read.csv("players.csv")
str(players)
